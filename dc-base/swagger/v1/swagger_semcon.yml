openapi: 3.0.1
info:
  title: Data Container API
  description: >-
    Semantic Containers enable the secure and traceable exchange of defined data
    on specified usage conditions between multiple parties.
     
     Further information:
     - learn more about Semantic Containers at https://www.ownyourdata.eu/semcon
     - view other [OwnYourData Service API's](https://api-docs.ownyourdata.eu)
  contact:
    email: office@ownyourdata.eu
  license:
    name: MIT License
    url: 'https://opensource.org/licenses/MIT'
  version: v1
servers:
  - url: /
security:
  - BearerAuth: []
paths:
  /oauth/token:
    post:
      summary: request token
      tags:
        - Authorization
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestTokenBody'
      responses:
        '200':
          description: Return token object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestBody'
        '401':
          description: invalid
  /oauth/token/info:
    get:
      summary: show token information
      tags:
        - Authorization
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInfoResponse'
        '401':
          description: Not authorized
  /oauth/revoke:
    post:
      summary: revoke token
      tags:
        - Authorization
      requestBody:
        $ref: '#/components/requestBodies/Input'
      responses:
        '200':
          description: success
        '404':
          description: not found
  /api/active:
    get:
      tags:
        - Container information
      security: []
      summary: check if container is active
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  active:
                    type: boolean
                  auth:
                    type: boolean
                    default: false
                  repos:
                    type: boolean
                    default: false
                  watermark:
                    type: boolean
                    default: false
                  billing:
                    type: boolean
                    default: false
                  scopes:
                    type: array
                    items:
                      type: string
                    default:
                      - admin
                      - write
                      - read
  '/api/meta/{detail}':
    get:
      tags:
        - Container information
      summary: specific container information
      parameters:
        - name: detail
          in: path
          required: true
          schema:
            type: string
            enum:
              - schemas
          description: >-
            'schemas' returns an array of all used Schema Base DRIs (SOyA),
      responses:
        '200':
          description: success
          content: {}
        '404':
          description: not found
          content: {}
  /api/data:
    get:
      summary: read specific records
      tags:
        - Read/Write Data
      parameters:
        - name: schema_dri
          in: query
          description: >-
            DRI (Decentralized Resource Identifier) of the OCA schema base
            describing the data
          schema:
            type: string
        - name: table
          in: query
          description: all records with specified table name
          schema:
            type: string
        - name: f
          description: output format
          in: query
          required: false
          schema:
            type: string
            enum:
              - plain
              - full
              - meta
              - validation
            default: full
      responses:
        '200':
          description: 'Return raw data, or an array of raw data'
        '403':
          description: Permission denied
    post:
      summary: Store data
      tags:
        - Read/Write Data
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataBody'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: integer
        '403':
          description: Permission denied
components:
  schemas:
    BadRequestBody:
      properties:
        status:
          type: integer
          example: 400
        error:
          type: string
          example: Bad request
      required:
        - status
        - error
    RequestTokenBody:
      properties:
        client_id:
          type: string
        client_secret:
          type: string
        grant_type:
          type: string
          enum:
            - client_credentials
            - password
      required:
        - client_id
        - client_secret
        - grant_type
    TokenResponse:
      properties:
        access_token:
          type: string
        token_type:
          type: string
        expires_in:
          type: integer
        created_at:
          type: integer
        username:
          type: string
    TokenInfoResponse:
      properties:
        resource_owner_id:
          type: string
        scope:
          type: array
          items:
            type: string
        expires_in:
          type: integer
        application:
          type: object
          properties:
            uid:
              type: string
        created_at:
          type: integer
    DataBody:
      properties:
        content:
          description: Key value json file representing data from schema base
          type: object
        dri:
          type: string
        schema_dri:
          type: string
        mime_type:
          type: string
          example: application/json
        table_name:
          type: string
          description: tag to group records (mimics repo functionality of Data Vault)
  requestBodies:
    Input:
      content:
        application/json:
          schema: {}
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
